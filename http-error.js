/**Aqu√≠ se define una nueva clase llamada HttpError, que hereda de la clase Error de JavaScript.
Esto significa que HttpError tendr√° todas las caracter√≠sticas de un Error,
pero adem√°s le vas a agregar cosas espec√≠ficas (como un c√≥digo HTTP). */

/* Esta nueva clase va a heredar todo lo que hace la clase Error de JavaScript".

¬øQu√© es una clase "Error"?

Error es una clase que ya viene incluida en JavaScript. La us√°s todo el tiempo sin darte cuenta, por ejemplo:
*/

/* ‚ÄúVoy a crear un nuevo tipo de error, llamado HttpError, que se comporta como los errores normales, pero le voy a agregar cosas nuevas como .code (el c√≥digo HTTP).‚Äù */

class HttpError extends Error {

    /* Este es el constructor de la clase. Cada vez que hagas new HttpError(...), esta funci√≥n se ejecuta.message: es el mensaje de error que vas a mostrar (ejemplo: 'Usuario no encontrado')
    errorCode: es el n√∫mero del c√≥digo HTTP (ej: 404, 500, 403...) */
    
    constructor (message, errorCode) {

        /* Cuando est√°s en una clase que hereda de otra, y quer√©s usar el constructor de la clase "padre" (Error), ten√©s que llamar a super().
        Esto le dice a JavaScript:
        ‚ÄúPasale este mensaje al constructor del Error original para que se configure correctamente.‚Äù */
        super(message);

        /* Esta l√≠nea agrega una nueva propiedad llamada code al objeto que se est√° creando (en este caso, un HttpError). */

        /* En el contexto de una clase, this se refiere al objeto que est√°s creando en ese momento. Por ejemplo:*/

        /* Cuando se llama a este constructor, se crea un objeto error.
        Y dentro del constructor, this representa a ese objeto error. */

        /* ‚ÄúEste objeto (this) va a tener una propiedad llamada code, y le voy a asignar el valor que me pasaron como errorCode.‚Äù */

        
        this.code = errorCode;
    }
}


/* üí° ¬øPor qu√© se hace esto?
En Express (y en general en Node.js), los errores se pueden lanzar con throw new Error(...). Pero eso no te da control sobre el c√≥digo de estado HTTP (como 404, 500, 403, etc.). Para eso, se crea esta clase personalizada llamada HttpError. */

/* Sin esta clase, cada vez que ten√©s un error tendr√≠as que hacer algo como: 

   const error = new Error('Algo sali√≥ mal');
    error.code = 500;
    next(error);




    Con HttpError simplemente hac√©s:

    next(new HttpError('Algo sali√≥ mal', 500));

*/




// Exporta la clase para ser utilizada en toda la aplicaci√≥n
module.exports = HttpError;