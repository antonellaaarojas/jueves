const User = require('../models/user');              // Modelo de usuarios
const bcrypt = require('bcryptjs');                 // Biblioteca para cifrar contrase√±as
const jwt = require('jsonwebtoken');                // Biblioteca para generar y verificar tokens JWT
const HttpError = require('../utils/errors/http-error'); // Clase para manejo de errores HTTP
const { validationResult } = require('express-validator'); // Validaci√≥n de datos de entrada

// Servicio para env√≠o de correos electr√≥nicos (recuperaci√≥n de contrase√±a)
const emailService = require('../utils/emails/emailService');


/**
 * Registra un nuevo usuario en el sistema (exclusivo para administradores)
 * ----------------------------------------------------------------------
 * Esta funci√≥n permite crear nuevos usuarios con roles espec√≠ficos.
 * Seg√∫n la consigna, solo los administradores pueden registrar usuarios,
 * lo que se controla mediante middleware de autorizaci√≥n en las rutas.
*/

const register = async (req, res, next) => {
  // Validamos los datos de entrada usando express-validator
  // Si hay errores en los campos (formato email, contrase√±a d√©bil, etc.)

   /*EN CRIOLLO  "Che, fijate si hay alg√∫n error en los datos que mand√≥ el usuario. Si hay alguno, no sigas con lo que ven√≠as haciendo, y en vez de eso, tir√° un error con el mensaje 'Datos inv√°lidos' y el c√≥digo 422 para que lo maneje el sistema de errores."*/ 

  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError('Datos inv√°lidos, revis√° los campos.', 422));
  }

  // Extraemos la informaci√≥n necesaria del cuerpo de la petici√≥n
  const { nombre, email, password, rol } = req.body;

  // Verificamos si ya existe un usuario con el mismo email
  // para evitar duplicados (email es campo √∫nico)

  /* Busc√° en la colecci√≥n de usuarios (User) uno solo que tenga el email que recibimos en el formulario (req.body.email)". */

  let existingUser;
  try {
    existingUser = await User.findOne({ email });
  } catch (err) { 
    return next(new HttpError('Error al verificar el usuario.'));
  }

  // Si ya existe un usuario con ese email, respondemos con error
  if (existingUser) {
    return next(new HttpError('Ya existe un usuario con ese email.', 422));
  }

  // Creamos un nuevo documento de usuario
  // NOTA: La contrase√±a se cifrar√° autom√°ticamente mediante
  // el middleware pre-save definido en el modelo User
  const createdUser = new User({
    nombre,
    email,
    password, // Ser√° cifrada antes de guardar en la BD
    rol,      // admin o recepcion (seg√∫n la consigna)
    tokens: [] // Array para almacenar tokens de sesi√≥n
  });

  try {
    // Guardamos el usuario en la base de datos
    await createdUser.save();

    // Respondemos con c√≥digo 201 (Created) y los datos b√°sicos del usuario
    // IMPORTANTE: No incluimos la contrase√±a en la respuesta por seguridad

    /* res.status(...) establece el c√≥digo de estado HTTP de la respuesta.

    El 201 significa:
    üëâ "Created" ‚Üí algo fue creado correctamente (en este caso, un usuario).

    Es el c√≥digo correcto seg√∫n la convenci√≥n HTTP cuando se crea un nuevo recurso.

    üîπ .json({...})
    .json() env√≠a una respuesta en formato JSON, que es como normalmente se comunican las APIs.*/

    res.status(201).json({
      mensaje: 'Usuario registrado',
      usuario: {
        id: createdUser.id,
        nombre: createdUser.nombre,
        email: createdUser.email,
        rol: createdUser.rol
      }
    });

  } catch (err) {
    return next(new HttpError('Error al registrar el usuario.', 500));
  }
};

/**
 * Inicia sesi√≥n y genera un token JWT
 * ---------------------------------
 * Este endpoint autentica al usuario mediante email y contrase√±a,
 * y genera un token JWT que se utilizar√° para las solicitudes posteriores.
 * El token contiene informaci√≥n del usuario (ID, email, rol) para autorizaci√≥n.
*/

const login = async (req, res, next) => {
  // Validamos los datos de entrada (formato de email, contrase√±a, etc.)
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError('Datos inv√°lidos. Revis√° tus credenciales.', 422));
  }

  // Extraemos email y contrase√±a del cuerpo de la petici√≥n
  const { email, password } = req.body;

  // Buscamos al usuario por su email en la base de datos
  let existingUser;
  try {
    existingUser = await User.findOne({ email });
  } catch (err) {
    return next(new HttpError('Error al buscar el usuario', 500));
  }

  // Si no existe usuario con ese email, respondemos con error
  // Usamos c√≥digo 403 (Forbidden) para no dar pistas sobre qu√© campo es incorrecto
  if (!existingUser) {
    return next(new HttpError('Credenciales inv√°lidas.', 403));
  }

  // Verificamos si la contrase√±a es correcta comparando con el hash almacenado
  // bcrypt.compare compara la contrase√±a plana con la contrase√±a cifrada

  let isValidPassword;
  try {
    isValidPassword = await bcrypt.compare(password, existingUser.password);
  } catch (err) {
    return next(new HttpError('Error al verificar credenciales', 500));
  }

  // Si la contrase√±a no coincide, respondemos con error
  if (!isValidPassword) {
    return next(new HttpError('Credenciales inv√°lidas', 403));
  }

  // Si las credenciales son correctas, generamos un token JWT
  let token;
  try {
    // Creamos el token con la informaci√≥n del usuario
    // Esta informaci√≥n estar√° disponible en las solicitudes autenticadas
    token = jwt.sign(
      {
        userId: existingUser.id,  // ID del usuario para identificaci√≥n
        email: existingUser.email, // Email para referencia
        rol: existingUser.rol      // Rol para autorizaci√≥n (admin/recepcion)
      },
      process.env.JWT_SECRET || 'secreto123', // Clave secreta para firmar el token
      { expiresIn: '1d' }                     // Tiempo de expiraci√≥n: 1 d√≠a
    );

    // Respondemos con los datos del usuario y el token
    // Este token debe ser incluido en el header Authorization de las siguientes peticiones
    res.json({
      userId: existingUser.id,
      email: existingUser.email,
      rol: existingUser.rol,
      token
    });
  } catch (err) {
    return next(new HttpError('Error al generar token.', 500));
  }
};

/**
 * Inicia el proceso de recuperaci√≥n de contrase√±a
 * ----------------------------------------------
 * Esta funci√≥n implementa el primer paso del proceso de recuperaci√≥n:
 * 1. Verifica que el usuario existe
 * 2. Genera un token especial de recuperaci√≥n 
 * 3. Env√≠a un email con un enlace que contiene el token
 * 
 * La consigna solicita espec√≠ficamente un "enlace √∫nico y seguro, enviado por correo"
*/
const forgotPassword = async (req, res, next) => {
  // Obtenemos el email del usuario que quiere recuperar su contrase√±a
  const { email } = req.body;
  
  // Buscamos al usuario por su email y verificamos que est√© activo
  let user;
  try {
    user = await User.findOne({ email, activo: true });
  } catch (err) {
    return next(new HttpError('Error al buscar usuario', 500));
  }

  // Si no encontramos un usuario activo con ese email, respondemos con error
  if (!user) {
    return next(new HttpError('No existe usuario con ese email', 404));
  }

  // Generamos un token JWT especial para recuperaci√≥n de contrase√±a
  // Este token tiene una duraci√≥n limitada (1 hora) por seguridad
  let token;
  try {
    token = jwt.sign(
      { 
        userId: user.id, 
        email: user.email, 
        action: 'password-reset' // Prop√≥sito espec√≠fico del token 
      },
      process.env.JWT_SECRET || 'secreto123',
      { expiresIn: '1h' } // Tiempo de expiraci√≥n: 1 hora
    );
  } catch (err) {
    return next(new HttpError('Error al generar el token de recuperaci√≥n', 500));
  }
  
  // Guardamos el token en el usuario para poder validarlo despu√©s
  // y asegurarnos que solo se use una vez
  user.resetPasswordToken = token;

  try {
    // Guardamos el usuario actualizado con el token
    await user.save();
    
    // Enviamos un correo electr√≥nico con las instrucciones y el enlace
    // El enlace contendr√° el token para validar la solicitud
    await emailService.enviarEmailRecuperacion(
      user.email,
      user.nombre,
      token,
      req.get('host'),  // Dominio del servidor
      req.protocol      // Protocolo (http/https)
    );

    // Respondemos sin dar detalles espec√≠ficos (seguridad)
    res.json({ mensaje: 'Se ha enviado un correo con instrucciones para recuperar tu contrase√±a' });
  } catch (err) {
    // Si hay error al enviar el correo, limpiamos el token para evitar problemas
    user.resetPasswordToken = undefined;
    await user.save();

    return next(new HttpError('Error al enviar correo de recuperaci√≥n', 500));
  }
};

/**
 * Verifica la validez del token de restablecimiento de contrase√±a
 * -------------------------------------------------------------
 * Este paso intermedio verifica si un token de recuperaci√≥n es v√°lido.
 * Se usa cuando el usuario hace clic en el enlace de recuperaci√≥n
 * enviado a su correo electr√≥nico, antes de mostrar el formulario
 * donde ingresar√° su nueva contrase√±a.
 */
const verifyResetToken = async (req, res, next) => {
  // Obtenemos el token de los par√°metros de la URL
  const { token } = req.params;
  try {
    // Verificamos si el token JWT es v√°lido y no ha expirado
    // jwt.verify desencripta el token y extrae su contenido
    const decodedToken = jwt.verify(token, process.env.JWT_SECRET || 'secreto123');
    
    // Comprobamos que el token es espec√≠ficamente para reseteo de contrase√±a
    // Esto evita que se use un token normal de autenticaci√≥n para este prop√≥sito
    if (!decodedToken || decodedToken.action !== 'password-reset') {
      return next(new HttpError('Token inv√°lido', 400));
    }
    
    // Verificamos que el usuario existe y tiene este token asignado
    // y que adem√°s est√° activo en el sistema
    const user = await User.findOne({
      _id: decodedToken.userId,
      resetPasswordToken: token, // El token debe coincidir exactamente con el almacenado
      activo: true               // Usuario debe estar activo
    });

    // Si no encontramos un usuario que cumpla todas las condiciones
    if (!user) {
      return next(new HttpError('Token inv√°lido o usuario no encontrado', 400));
    }

    // Si el token es v√°lido, respondemos con √©xito
    // Esto permitir√° mostrar el formulario para ingresar la nueva contrase√±a
    res.json({ mensaje: 'Token v√°lido', userId: user._id });
  } catch (err) {
    // Si el token est√° expirado o es inv√°lido, jwt.verify lanzar√° una excepci√≥n
    return next(new HttpError('Token inv√°lido o expirado', 400));
  }
};

/**
 * Restablece la contrase√±a del usuario usando el token
 * --------------------------------------------------
 * Este es el paso final del proceso de recuperaci√≥n de contrase√±a.
 * Recibe el token y la nueva contrase√±a, verifica que todo sea v√°lido,
 * y actualiza la contrase√±a del usuario en la base de datos.
 */
const resetPassword = async (req, res, next) => {
  // Validamos los datos de entrada (requisitos de contrase√±a)
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return next(new HttpError('Datos inv√°lidos, revis√° los campos', 422));
  }

  // Obtenemos el token y la nueva contrase√±a
  const { token } = req.params;
  const { password } = req.body;
  
  try {
    // Verificamos que el token sea v√°lido y no haya expirado
    const decodedToken = jwt.verify(token, process.env.JWT_SECRET || 'secreto123');
    
    // Comprobamos que el token es espec√≠ficamente para reseteo de contrase√±a
    if (!decodedToken || decodedToken.action !== 'password-reset') {
      return next(new HttpError('Token inv√°lido', 400));
    }
    
    // Buscamos al usuario por ID, token y estado activo
    // Requerimos que el resetPasswordToken coincida exactamente
    // para evitar ataques de adivinaci√≥n
    const user = await User.findOne({
      _id: decodedToken.userId,
      resetPasswordToken: token,
      activo: true
    });

    // Si no encontramos un usuario que cumpla todas las condiciones
    if (!user) {
      return next(new HttpError('Token inv√°lido o usuario no encontrado', 400));
    }

    // Actualizamos la contrase√±a y eliminamos el token de recuperaci√≥n
    // NOTA: La contrase√±a se cifrar√° autom√°ticamente mediante el middleware
    // pre-save definido en el modelo User antes de guardarse en la BD
    user.password = password;         // Nueva contrase√±a (ser√° cifrada)
    user.resetPasswordToken = undefined; // Invalidamos el token para que no se use nuevamente

    // Guardamos los cambios en la base de datos
    await user.save();

    // Respondemos con mensaje de √©xito
    res.json({ mensaje: 'Contrase√±a actualizada correctamente' });
  } catch (err) {
    // Si el token est√° expirado o es inv√°lido, jwt.verify lanzar√° una excepci√≥n
    return next(new HttpError('Token inv√°lido o expirado. Error: ' + err.message, 400));
  }
};

/**
 * Exportaci√≥n de los controladores de autenticaci√≥n
 * ------------------------------------------------
 * Todas estas funciones implementan los requisitos de la consigna:
 * - Sistema de autenticaci√≥n con JWT
 * - Manejo seguro de contrase√±as con bcrypt (en el modelo User)
 * - Recuperaci√≥n de contrase√±a con enlace √∫nico enviado por correo
 */
module.exports = { 
  register,          // Registrar nuevo usuario (solo admin)
  login,             // Iniciar sesi√≥n y generar JWT
  forgotPassword,    // Solicitar recuperaci√≥n de contrase√±a
  verifyResetToken,  // Verificar validez del token de recuperaci√≥n
  resetPassword      // Cambiar contrase√±a con token
};